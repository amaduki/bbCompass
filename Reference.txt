【ファイル配置について】
/(root)
│  Changelog.txt                変更ログ
│  image.html                   画像ダウンロード用ページ
│  index.html                   トップページ
│  License.txt                  ライセンス
│  Readme.txt                   Readme
│  Reference.txt                この文章
│
├─data/
│       *.txt                   各マップ向けのデータ(JSON形式)
│  
├─image/
│       *.png                   マップ以外の画像データ(アイコン類)
│  
├─map/
│  │  
│  ├─(ステージ)/
│  │   *.jpg                   各マップの画像データ
│  │  
│  └─(ステージ)/
│       *.jpg                   各マップの画像データ
│  
└─include/
    │   bb_compass.css          Web表示用のCSS(主にBBコンパス固有のもの)
    │   ribbonmenu.css          Web表示用のCSS(主にメニュー関連のもの)
    │   bb_object.js            描画処理などを記述してある本体
    │   bb_object.min.js        bb_object.jsをYUI Compressorで縮小したもの
    │   bb_query.js             BBオブジェクトを文字列化するためのライブラリ
    │   bb_query.min.js         bb_query.jsをYUI Compressorで縮小したもの
    │   bb_webfunc.js           Webのボタン動作などを記述したJavascript
    │   bb_webfunc.min.js       bb_webfunc.jsをYUI Compressorで縮小したもの
    │
    ├─jcanvas/
    │       jCanvaScript.1.5.18.min.js
    │       jCanvaScript.1.5.18.js
    │
    ├─jquery/
    │       jquery-2.0.2.min.js
    │       MIT-LICENSE.txt
    │
    ├─js-deflate/
    │       rawdeflate.js
    │       rawdeflate.min.js
    │       rawinflate.js
    │       rawinflate.min.js
    │
    ├─scp/
    │       jquery.simple-color-picker.css
    │       jquery.simple-color-picker.js
    │       LICENSE
    │
    └─uuid/
             License.txt
             uuid.js


  このツールのディレクトリ構造はこんな感じです。
  bb_object.min.jsがツールのコア部分で、描画などの機能が作りこんであります。
  フォーム制御などインターフェース側のプログラムはbb_webfunc.min.jsが担いますが、
  URL化に関する処理だけは別ファイルbb_query.min.jsが間に介在します。
  index.htmlとbb_compass.cssはごく普通のHTMLとCSSファイルですね。

  bbobject.min.jsとbb_webfunc.min.jsは
  それぞれの元ファイルをWeb表示用に最小化(minimize)したものです。
  Webで公開する時には最小化版しか使わないのですが、
  改造する場合は人が読めないと困るので、元ファイルも同梱しています。
  (つまり、そのまま使うだけであれば.min.jsだけをアップロードすればOKです)

  また、jcanvas/js-deflate/jquery/uuid/scpの各ディレクトリは外部ライブラリです。
  jqueryとuuidについてはダウンロードしたそのままを使っていますが、
  jCanvaScriptはgithubから取得した物を自前でminimizeして利用している場合もあり、
  一応元ファイルとminimizeしたファイルの双方を同梱することにしています。
  simple color pickerはjQuery2.0.2に対応していないため、1行だけ書き換え。
  js-deflateについてはデータ形式を少し書き換えたものを、それぞれ利用しています。


【この文書で説明する範囲について】
  ファイル階層でも書いた通り、BBコンパスもどきは主に3階層でできています。
  bb_query.min.jsはwebfuncとobjectの間に必要な時に入るヘルパ的な存在です。

    Web関連の見栄えを決めるHTMLとCSS
    Webのボタンなどの動きを決めるbb_webfunc.min.js
    画像処理などを定義するbb_object.min.js


  本文書はコンパスもどきのコアであるbb_object.jsについての説明がメインで、
  末尾に少しbb_query.jsに関する説明が載せてある程度です。
  HTMLやcss、フォームの扱いについてはあまり特殊なことはしていないので、
  世間に出回っている解説書などを参考にして下さい。


【各ステージの画像ファイルについて】
  メインの画像データ1枚に加え、通路等の表示用にはメインとの差分画像を利用します。
  ファイル名はメイン画像が(ステージ名).jpg、差分は(ステージ名)_(連番).jpgです。
  ※なお、差分用ファイルの連番は1から始まります
  大半のマップははBB.Netから各マップの拡大画像を入手し、70%に縮小して使っていますが、
  Ver. 4.5以降のマップはサイズが不安定なので、80%だったり縮小していなかったりします。
  なんとなく900から1000pixel程度を最大サイズの目安にしています

  ステージ名についてはindex.htmlのselectタグで指定した名前(value)が
  そのままbb_webfunc経由で呼び出されますので、そちらと合わせてください。

  プログラム側(bb_webfunc)にまで手を入れる場合は
  BBオブジェクトのsetbg、setbgdiffに関する解説を参照願います。


【各ステージ用のデータファイルについて】
  データファイルのファイル名は(ステージ名).txtです。
  JSONP形式で各種の表示用データを入れる想定で、
  現状ではガンタレと索敵装置の位置データが入っています。

  ※2013/03/31追記
    以前はこのデータファイルはJSON形式でしたが、
    ローカルでもガンタレ機能を使えるようにするため、
    JSONP形式に変更されました。ご注意ください。

  現時点での書式は下記の通り。

  stageData ({
    "turret":[
        [x座標, y座標, 角度, 種類(RMGLのどれか), テストフラグ],
    ],
    "searcher":[
        [x座標, y座標, 索敵範囲, テストフラグ],
    ]
  });

  ※索敵装置の範囲は85m固定かもしれませんが、
    将来どうなるかわからないので変更できるようになっています

  なお、データファイルが存在しない場合も基本的な機能は動作します。
  ガンタレなど、データファイルに依存する機能が使われないだけです。

  また、これはプログラム的な話題ですが、
  bb_objectはオブジェクト表示や作成のみを取り扱う設計なので、
  bb_objectにはデータファイル読み込みに関する処理は書かれていません。
  データファイルはwebfuncで解析してからbb_objectに渡されます。


【bb_object.min.jsの利用例】
  //まず最初にBBオブジェクトを作る(引数はcanvasタグのID)
  //document.onloadなどで実行することをオススメします
  var bbobj=new BB("canvasID");

  //これ以後の機能はフォームのボタンなどを通じて実行させる想定です

  //背景を設定する
  //地図画像が160px=100mの場合、二つ目の引数は160/100=1.6を指定
  bbobj.setbg("/path/to/map.jpg",1.6);

  //オブジェクトを置く(半径50mのセンサーオブジェクトを配置する例)
  var sensor1=bbobj.set_scout("センサー",50,'#FF0000');  //画像オブジェクトが返ってくる
  var id=sensor1.id;

  //センサーの色を変えてみる
  sensor1.color('#00FF00');             //オブジェクト直指定
  bbobj.object(id).color('#0000FF');    //idを経由して呼び出すこともできる

  //センサーを移動させてみる
  sensor1.move(10,20);                  //右に10pixel、下に20pixel移動

  //背景に差分画像を重ねてみる
  bbobj.setbgdiff("/path/to/map_diff.jpg");

  //センサーを消す
  sensor1.del();


------------------------------------------------------------------------
【BBオブジェクトについて】
  このオブジェクトはコンパスもどき本体をクラス化したもので、
  canvasごとにインスタンスを生成して利用します。
  このオブジェクトを通じて、指定canvasの背景画像や差分画像を設定したり、
  マップ内に画像オブジェクトを生成することができます。


○BBオブジェクトの生成
  var bbobj=new BB("canvasID");
  引数：id        キャンバスタグのid


○BBオブジェクトのプロパティ
・id
  呼び出し時に指定したcanvasIDを指しています。
  書き込みはしないでください。オナシャス。


・scale
  地図の1メートルあたりのピクセル数を管理しています。
  背景を表示するときに一緒に指定したものを保管しているだけです。
  拡大・縮小などで画面の再描画を行う際に利用されます。


・zoomScale
  拡大表示・縮小表示に利用する倍率を管理しています。


・imgscale
  地図画像を圧縮、伸長させている場合にその倍率を保持しています。
  これも背景を表示するときに一緒に指定したものを保管しているだけです。


○BBオブジェクトのメソッド
・setbg(string fipepath, num scale[, num imgscale [, function callback]])
  引数：filepath 地図画像のパス
        scale    1メートルあたりのピクセル数を指定(画像ファイル基準)
        imgscale 実表示の際画像サイズを縮小、拡大したい場合に指定
        callback マップ表示処理完了後に実行されるコールバック関数
  返値：なし

  背景画像を変更するとともに、縮尺などの情報を更新します。
  ここで指定したscaleが距離測定の基準としてつかわれます。
  もしも背景画像が大きすぎたり、小さすぎたりする場合は、
  imgscaleを指定することで画像を指定比率で縮小・拡大できます。
  なお、imgscaleを指定した場合でもscaleの指定値は変える必要はありません。
  （最終的な縮尺を内部で計算するようになっています）


・setbgdiff(string filepath)
  引数：filepath 差分画像のパス
  返値：なし

  背景画像の差分を設定します。
  この命令を複数回実行した場合、差分ファイルは差し替えされ、
  「指定した分だけ重ねる」という動作にはなりません。
  また、空文字列をパスとして渡すと、現在重ねている差分画像を消します。


・zoom(num scale)
  引数：scale    現在の状況からの倍率
  返値：obj      BBオブジェクト

  指定された倍率にあわせて拡大・縮小処理を行います。
  canvas自体も画像のサイズにあわせて拡大されます。

  倍率についてはjCanvaScriptなどの仕様に合わせているため、
  現在の倍率を基準とした相対指定しかできません。


・object(string id)
  引数：id       各オブジェクトのid
  返値：obj      画像オブジェクト

  描画済みオブジェクトの中から
  指定idを持つオブジェクトを返します


・save()
  引数：なし
  返値：txt      画像データ(dataスキーマ)

  現在の画像データをdataスキーマで返します。
  下のような形で使えば、画像データをもったimageオブジェクトが出来上がるので、
  それをDOMに挿入するなどして表示してください。

  var image=new Image;    // 新しいimgタグを準備
  image.src=bbobj.save()  // srcとしてsaveメソッドの出力を渡す
  

・pixel_to_meter(num pixel)
  引数：pixel    ピクセル指定の距離
  返値：meter    メートル指定の距離

  名の通り、ピクセル数を地図上のメートルに変換します
  変換の倍率はset_bgで背景を設定したときの値が利用されます。


・meter_to_pixel(num meter)
  引数：meter    メートル指定の距離
  返値：pixel    ピクセル指定の距離

  名の通り、地図上のメートルを画像のピクセル数に変換します
  変換の倍率はset_bgで背景を設定したときの値が利用されます。


・put_turret (num x, num y, num rot, num radius, num angle[, num hookrad, string color, boolean test])
  引数：x        ターレットを配置するx座標(画像ベース)
        y        ターレットを配置するx座標(画像ベース)
        rot      ターレットの角度（0で上向きです）
        radius   ターレットの射程半径
        angle    ターレットの回転角度
        hookrad  ターレット表示を判定する円の大きさ
        color    表示色  省略時は橙色(#FFF900)
        test     テストフラグ
  返値：なし

  マップ上にターレットアイテムを配置します
  ターレットアイテムは指定座標を中心として半径hookradの円が設定され、
  そこにマウスを置いたときに扇形の射撃範囲表示が出ます。
  また、射撃範囲表示中にクリックすると、表示のON/OFF切り替えもできます。

  この扇形は半径radius、中心角angle度、扇形の中心が上からrot度を向きます。
  なお、testフラグをtrueにした場合は、場所・角度の調節用として
  マウス位置判定の円と、ターレットの向きが白く表示されます。


・put_searcher (num x, num y, num radius[, num hookrad, string color, boolean test])
  引数：x        索敵装置を配置するx座標(画像ベース)
        y        索敵装置を配置するx座標(画像ベース)
        radius   索敵装置の偵察広さ
        hookrad  表示を判定する円の大きさ
        color    表示色  省略時は水色(#99FFFF)
        test     テストフラグ
  返値：なし

  マップ上に索敵装置アイテムを配置します
  索敵装置アイテムは指定座標を中心として半径hookradの円が設定され、
  そこにマウスを置いたときに円形の索敵範囲表示が出ます。
  また、マウスオーバー用の領域でクリックすると、表示のON/OFF切り替えもできます。

  なお、testフラグをtrueにした場合は、ターレットと同じく、
  場所の調節用としてマウス位置判定の円が白く表示されます。


・add_circle (string text, num radius[, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius   円の初期半径(m単位)
        color    表示色  省略時は青色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(円)

  円オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  画像の基準点は円の中心が利用されます。


・add_line (string text, num length[, string color [, function callback]])
  引数：text     オブジェクトの名前
        length   直線の初期長さ(m単位)
        color    表示色  省略時は緑色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(直線)

  直線オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  画像の基準点は線を構成する二点の中心が利用されます。

・add_point (string text, num radius, [, string color [, num align [, function callback]]])
  引数：text     オブジェクトの名前
        radius   点の半径(pixel単位)
        color    表示色  省略時は黄色
        align    0なら文字を点の左に、1なら右に表示させる。省略時は右
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(直線)

  点オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  画像の基準点は点を表現する円の中心が利用されます。

・add_scout (string text, num radius, num length, num duration [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius   偵察半径(m指定)
        length   偵察機が飛行する距離(m指定)
        duration 偵察機が「進む」時間(秒単位)
        color    表示色  省略時は赤色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(偵察機)

  偵察機オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  画像の基準点は偵察半径の中心が利用されます。


・add_sensor (string text, num radius [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius   偵察半径(m指定)
        color    表示色  省略時は赤色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(センサー)

  センサーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は偵察半径の中心が利用されます。


・add_radar (string text, num radius, num angle [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius   偵察半径(m指定)
        angle    索敵角度(角度で指定)
        color    表示色  省略時は赤色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(レーダー)

  レーダーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は索敵範囲を示す扇形の中心が利用されます。


・add_sonde (string text, num radius1, num radius2 [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius1  射出範囲半径(m指定)
        radius2  偵察範囲半径(m指定)
        color    表示色  省略時は緑色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(索敵弾)

  索敵弾オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は射出範囲の中心点が利用されます。


・add_ndsensor (string text, num radius [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius   偵察範囲半径(m指定)
        color    表示色  省略時は赤色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(NDセンサー)

  ND索敵センサーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は索敵の中心点が利用されます。


・add_vsensor (string text, num radiusa, num radiusb [, string color [, string mode [, function callback]]])
  引数：text     オブジェクトの名前
        radiusa  Aモード偵察半径(m指定)
        radiusb  Bモード偵察半径(m指定)
        color    表示色  省略時は紫色
        mode     初期時点での表示モード
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(Vセンサー)

  Vセンサーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は偵察半径の中心が利用されます。

  このオブジェクトには独自メソッドとして、
  モード切替を実行するmodechgメソッドがあります。
  特に引数は取りませんし、返り値も意味はありません。
  呼ばれたらモード切替するだけです

・add_howitzer (string text, num radius1, num radius2, num radius3 [, string color [, function callback]])
  引数：text     オブジェクトの名前
        radius1  砲撃の射程(m指定)
        radius2  攻撃範囲(m指定)
        radius3  着弾誤差(m指定)
        color    表示色  省略時は黄色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(榴弾)
 
  榴弾オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は射程円の中心が利用されます。


・add_bunker (string text[, string color [, function callback]])
  引数：text     オブジェクトの名前
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(バンカー)
 
  バンカーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は攻撃範囲の中心が利用されます。


・add_bomber (string text[, string color [, function callback]])
  引数：text     オブジェクトの名前
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(爆撃機)
 
  爆撃機オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は自機に相当する位置が利用されます。


・add_bascout (string text[, string color [, function callback]])
  引数：text     オブジェクトの名前
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(爆撃機)
 
  偵察要請装置オブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は自機に相当する位置が利用されます。


・add_sentry (string text[, string color [, function callback]])
  引数：text     オブジェクトの名前
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(セントリー)
 
  セントリーガンオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は攻撃範囲を示す扇形の中心が利用されます。


・add_aerosentry (string text[, string color [, function callback]])
  引数：text     オブジェクトの名前
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(エアロセントリー)
 
  エアロセントリーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は攻撃範囲を示す円の中心が利用されます。


・add_icon (string text, file[, string color [, function callback]])
  引数：text     オブジェクトの名前
        file     表示に利用するアイコンの場所
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(バンカー)
 
  アイコンオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点は画像の中心が利用されます。

  内部的にはほとんど↓のワフトローダーと同じです。
  回転機能などがオミットされてはいることと、
  ワフトローダーが直径40m円を基準にサイズを決めているのに対して、
  こちらはアイコンをそのままのサイズで出す点が異なります。


・add_waft (string text, file[, string color [, function callback]])
  引数：text     オブジェクトの名前
        file     表示に利用するアイコンの場所
        color    表示色  省略時は紫色
        color    表示色  省略時は紫色
        callback 描画処理完了後に実行されるコールバック関数
  返値：obj      画像オブジェクト(バンカー)
 
  ワフトローダーオブジェクトをcanvasに追加します
  返されるオブジェクトが持つメソッドについては、
  下にある画像オブジェクトのリファレンスを見てください。
  この画像の基準点はワフトローダを囲む円の中心が利用されます。

  なお、直径40m相当の色つき円の中に指定の画像を配置するのですが、
  その際、画像は高さか幅が円の直径と一致するように拡縮されます。
  画像ファイルは四角形で、画像の背景部分は円をはみ出すことになるので、
  指定する画像は必ず背景色を透明にしてください。


・add_freehand ([string color])
  引数：color    表示色  省略時は白色
  返値：obj      画像オブジェクト(フリーハンド)
 
  フリーハンドオブジェクトをcanvasに追加します
  このオブジェクトの振る舞いは画像オブジェクトとほぼ同じですが、
  内部的には結構いろいろな違いがあります。
  具体的な扱いは下にあるフリーハンドオブジェクトのリファレンスを見てください。


【画像オブジェクトについて】
  画像オブジェクトはマップ内に配置される各画像を管理するもので、
  BBオブジェクトを通じて生成されます。

  このオブジェクトに対して命令を発行することで
  画像を移動させたり、重ねあい順序を変更したりできます。

  内部的には画像オブジェクトというスーパークラスがあり、
  円、直線、偵察機などそれぞれの画像はサブクラスとして実装されていますが、
  今のところ各オブジェクト固有のメソッドなどはありません。

  なお、jCanvaScript内部では、画像オブジェクトはレイヤーとして管理され、
  その中に複数の画像が配置されている、といった体裁になっています。
  画像の移動や回転を行う場合は原則レイヤー単位で処理を行います。


○画像オブジェクトの持つプロパティ
・id
  画像オブジェクトの持つIDです。
  BBオブジェクトのobjectメソッドに引数として渡せば
  画像オブジェクトを得ることができます。
  Web側のフォームなどではこのIDで管理するのが楽だと思います。


・type
  オブジェクトの種別を示します。
  テキストで circle,line,radar,sensor,scout,howitzer のどれかが入ります
  このプロパティは管理用の情報であり、書き換えてもオブジェクトの型は変わりません。


・_color / _text / _lengthなど
  オブジェクト生成時に指定したパラメータです。
  これらの値はすべてプロパティとして保持されていて、
  頭にアンダースコアをつければ呼び出すことができます。

  変数名からもわかるとおり、外部からのアクセスはあまり想定していません。
  もし外部からこれらの値を変更した場合、
  redrawメソッドを使って画像オブジェクトを再描画してください。


○画像オブジェクトが持つ外部向けメソッド
・rotAngle()
  引数：なし
  返値：角度

  画像の回転角度(正確には画像が属するレイヤの回転角度)を返します。
  この関数の返値は「度」単位であり、radianではありません。
  偵察機やレーダーの方角を得るのに使えますが、
  大半のオブジェクトでは0しか返ってきません

・redraw()
  引数：なし
  返値：obj      画像オブジェクト

  オブジェクトを再描画します。


・position()
  引数：なし
  返値：hash     座標　連想配列で{x:x座標, y:y座標}

  画像基準点の現在位置(canvas内での座標)を連想配列の形で返します。
  「obj.position().x」という形で座標を呼び出してください。


・move(dx,dy)
  引数：dx       x方向の移動距離(pixel単位)
        dy       y方向の移動距離(pixel単位)
  返値：obj      画像オブジェクト

  x方向にdx、y方向にdy、画像をずらします。
  引数はピクセル単位なので注意してください。


・moveTo(x,y)
  引数：x        x方向の座標(pixel単位)
        y        y方向の座標(pixel単位)
  返値：obj      画像オブジェクト

  画像の基準点がcanvas内の指定座標にくるように画像を動かします。
  引数はピクセル単位なので注意してください。


・text()
  引数：なし
  返値：text     名前文字列

  オブジェクトに指定した名称を返します


・text(string text)
  引数：text     名前文字列
  返値：obj      画像オブジェクト

  オブジェクトの名称を変更します


・color()
  引数：なし
  返値：color    色指定

  オブジェクトの表示色を取得します


・color(string color)
  引数：color    色指定
  返値：obj      画像オブジェクト

  オブジェクトの表示色を設定します


・up()
  引数：なし
  返値：obj      画像オブジェクト

  画像の重ねあい順位を1段階上げます


・down()
  引数：なし
  返値：obj      画像オブジェクト

  画像の重ねあい順位を1段階下げます


・mouseup(function fn)
  引数：fn       コールバック関数
  返値：obj      画像オブジェクト

  オブジェクト内でマウスボタンを離したときに実行する関数を指定できます
  なお、コールバック関数の返り値がtrueだった場合、
  重ねあい順序が下のオブジェクトのmouseupイベントが発生します。
  下のオブジェクトのイベントを発生させたくない場合はfalseを返してください。


・mousedown(function fn)
  引数：fn       コールバック関数
  返値：obj      画像オブジェクト

  オブジェクト内でマウスボタンを押したときに実行する関数を指定できます
  なお、コールバック関数の返り値がtrueだった場合、
  重ねあい順序が下のオブジェクトのmousedownイベントが発生します。
  下のオブジェクトのイベントを発生させたくない場合はfalseを返してください。


・click(function fn)
  引数：fn       コールバック関数
  返値：obj      画像オブジェクト

  オブジェクト内でマウスボタンをクリックしたときに
  実行する関数を指定できます
  なお、コールバック関数の返り値がtrueだった場合、
  重ねあい順序が下のオブジェクトのclickイベントが発生します。
  下のオブジェクトのイベントを発生させたくない場合はfalseを返してください。


・dblclick(function fn)
  引数：fn       コールバック関数
  返値：obj      画像オブジェクト

  オブジェクト内でマウスボタンをダブルクリックしたときに
  実行する関数を指定できます
  なお、コールバック関数の返り値がtrueだった場合、
  重ねあい順序が下のオブジェクトのdblclickイベントが発生します。
  下のオブジェクトのイベントを発生させたくない場合はfalseを返してください。


・del()
  引数：なし
  返値：なし

  オブジェクトを削除します


【フリーハンドオブジェクトについて】
  フリーハンドオブジェクトは手書き画像を扱うオブジェクトで、
  BBオブジェクトを通じて生成されます。

  基本的な部分では画像オブジェクトと同等の扱いですが、
  生成や描画の処理が特殊であったり、移動・回転の概念がないことから、
  個別のオブジェクトとして独自に定義されています。


○フリーハンドオブジェクトが持つプロパティ
・id
  フリーハンドオブジェクトの持つIDです。
  BBオブジェクトのobjectメソッドに引数として渡せば
  画像オブジェクトを得ることができます。
  Web側のフォームなどではこのIDで管理するのが楽だと思います。


・type
  オブジェクトの種別を示します。テキストで freehand が入ります。
  こちらも書き換えによってオブジェクトの実態が変わったりはしません。


○フリーハンドオブジェクトが持つ外部向けメソッド
・redraw()
  引数：なし
  返値：obj      画像オブジェクト

  オブジェクトを再描画します。


・color()
  引数：なし
  返値：color    色指定

  オブジェクトに現在指定されている色を取得します


・move(dx,dy)
  引数：dx       x方向の移動距離(pixel単位)
        dy       y方向の移動距離(pixel単位)
  返値：obj      画像オブジェクト

  x方向にdx、y方向にdy、画像をずらします。
  引数はピクセル単位なので注意してください。


・moveTo(x,y)
  引数：x        x方向の座標(pixel単位)
        y        y方向の座標(pixel単位)
  返値：obj      画像オブジェクト

  画像の基準点がcanvas内の指定座標にくるように画像を動かします。
  フリーハンドオブジェクトの基準点は描画の原点であり、
  初期状態ではキャンバスの原点と一致しています。


・color(string color)
  引数：color    色指定
  返値：obj      画像オブジェクト

  オブジェクトの次の描画で利用される色を設定します
  他のオブジェクトと異なり、すでに書かれた線には影響しません。


・start()
  引数：なし
  返値：obj      画像オブジェクト

  フリーハンド描画を開始します。
  描画中、他のオブジェクトのイベントは抑制されます。


・undo()
  引数：なし
  返値：obj      画像オブジェクト

  フリーハンド描画で最後に記入した線を消します。
  start()で描画モードに入っている時にのみ機能します。
  この関数で消した線はredo()で復旧できますが、
  新しい線を書き込んだ時やend()で描画モードから抜けた時は
  undoのキャッシュデータが削除され、復旧できなくなります。


・redo()
  引数：なし
  返値：obj      画像オブジェクト

  undoで最後に消した線を戻します。
  start()で描画モードに入っている時にのみ機能します。
  もとに戻せない場合もあるため、undo()の項も確認して下さい。


・end()
  引数：なし
  返値：obj      画像オブジェクト

  フリーハンド描画を終了します。


・up()
  引数：なし
  返値：obj      画像オブジェクト

  画像の重ねあい順位を1段階上げます


・down()
  引数：なし
  返値：obj      画像オブジェクト

  画像の重ねあい順位を1段階下げます


・del()
  引数：なし
  返値：なし

  オブジェクトを削除します


------------------------------------------------------------------------
【BBコンパスクエリオブジェクトについて】
  このオブジェクトはコンパスもどきをクエリ化する際に必要な関数と、
  クエリ化する際の作業データ類をオブジェクトとしてまとめたものです。

  Web側から呼び出して、指定のBBオブジェクトにアクセスさせ、
  状態を読み取ったり、再現させたりすることを意図しています

○BBコンパスクエリオブジェクトの生成
  var queryobj=new BBCQuery(bbobj, "map");
  引数：bbobj       制御したいBBオブジェクト
      ：map         マップ名

  ※再現モードの場合、とりあえずダミーのマップ名を指定してください


○BBコンパスクエリオブジェクトのプロパティ
・bbobj
  呼び出し時に指定したBBオブジェクトを保持します


・map
  現在処理対象としているマップ名を保持します


○BBコンパスクエリオブジェクトのメソッド
・getObjects(array objs)
  引数：objs     画像オブジェクトのidを格納した配列
  返値：なし

  指定した画像オブジェクトのデータをクエリ化対象として取り込みます


・getQueryString()
  引数：なし
  返値：クエリ文字列

  読み込み済みの情報を文字列化して出力します
  内部データをrawdeflate処理してbase64エンコードしています


・setObjects()
  引数：なし
  返値：なし

  読み込み済みの情報を再現するためのメソッドです。
  自分が保持するマップ名でマップをひらき直した後に、
  内部データとして格納しているデータをもとにして
  画像オブジェクトの再配置を行います


・setQueryString(String str)
  引数：クエリ文字列
  返値：読み込み成否(boolean)

  文字列情報を内部データとして取り込むために使います。
  その時点までに取り込んだマップ名や内部データはリセットされ
  文字列を展開して得られたデータで置換されます

------------------------------------------------------------------------
【その他内部的なメモ】
○jCanvascriptのレイヤ0について
  レベル-1	：メインの地図
  レベル0	：地図の差分
  レベル1	：ガンタレエリア表示
  レベル2	：ガンタレのイベント点


○クエリ化に際してオブジェクト種別を示すコード
  (0x00系  図形関連)
  ・0x01	円
  ・0x02	直線
  ・0x03	フリーハンド
  ・0x04	点
  ・0x05	アイコン

  (0x10系  索敵関連)
  ・0x11	偵察機
  ・0x12	センサー
  ・0x13	レーダー
  ・0x14	滞空索敵弾
  ・0x15	NDセンサー
  ・0x16	偵察要請装置
  ・0x17	Vセンサー

  (0x20系  攻撃関連)
  ・0x21	榴弾
  ・0x22	サテバン
  ・0x23	爆撃機
  ・0x24	セントリー
  ・0x25	エアロセントリー

  (0x30系  マップ要素)
  ・0x30	サテバン

  ※種別ごとに格納してるものと順序が決まっています
    bb_query.jsのgetObjectsを参照してください

○クエリ化する際の基本的なデータ書式
  ・色		24bit
    8bitの符号なし整数を３つ並べたもの
    つまり、RGBの値そのもの

  ・Int8	8bit
    8bitの符号なし整数
    ステップ数などを保管

  ・Int16	16bit
    16bitの符号なし整数
    距離関連の情報を扱う際に利用

  ・Float32	32bit
    32bitの符号なし浮動小数点
    角度情報の保管に利用

  ・Pos		24bit
    座標保管に利用される構造体みたいなもの。
    x座標とy座標を12bitづつの符号なし整数として保管。

  ・Str		可変長
    主にオブジェクトの名前を格納する
    1byteの長さ情報と、文字データそのものを保持
